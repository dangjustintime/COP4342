#!/bin/bash
# pre-pages
# Created by Robert van Engelen
# Distributed under the GPL

theme=1     # default theme
shell=bash  # shell to use for demos (bash or tcsh)
workd="."   # work directory to use for shell demos
title="Welcome back $USER" # title of the presentation (<40 chars)
wsite="http://www.cs.fsu.edu/~engelen/courses/COP4342" # web site with ch*.pages

#====================

page=1
back=1
last=1
show=0

#====================

function navigate() {
  while true; do
    read -rsn1 key < /dev/tty
    case $key in 
      $'\e'|'[')
        ;;
      *)
        break;
        ;;
    esac
  done
  show=0
  case $key in
    p|D)
      if [[ $page > 1 ]]; then
        (( page-- ))
      fi
      ;;
    n|C)
      (( page++ ))
      ;;
    h)
      back=$page
      page=1
      ;;
    f|/)
      echo
      read -p "Find (regex) ? " key < /dev/tty
      if [ -n "$key" ]; then
        awk "/ PAGE / { page = \$4 }
             /$key/ { if (page > 0) print \"Page\", page, \": \", \$0 }" $0
        echo
        read -n1 -p "Press a key to continue " key < /dev/tty
      fi
      ;;
    g)
      back=$page
      echo
      read -p "Page? " page < /dev/tty
      ;;
    b)
      local temp
      temp=$page
      page=$back
      back=$temp
      ;;
    d)
      show=1
      ;;
    s)
      printf "\r\e[${bcolor}m%80s\e[0m\n" "^D to exit when done with $shell"
      if [ -d $workd ]; then
        pushd $workd > /dev/null
      else
        pushd . > /dev/null
      fi
      if [ "$shell" = "bash" ]; then
        PS1="$ " PS2="> " bash -i < /dev/tty
      else
        tcsh -i < /dev/tty
      fi
      popd
      ;;
    o)
      if [[ $page > 0 ]]; then
        back=$page
      fi
      page=0
      ;;
    u)
      echo
      read -n1 -p "Download update (y/n)? " key < /dev/tty
      if [ $key = "y" ]; then
        if which wget; then
          echo "Saved old $0 as $0.old"
          mv -f $0 $0.old
          echo "Getting $0 from $wsite..."
          wget $wsite/$0
          chmod +x $0
          read -n1 -p "Press a key to restart " key < /dev/tty
          exec $0
        else
          echo "No wget found, you need to install wget first"
        fi
      fi
      ;;
    q)
      echo
      read -n1 -p "Exit (y/n)? " key < /dev/tty
      if [ $key = "y" ]; then
        echo -e "\nBye!\n"
        exit 0
      fi
      ;;
  esac
}

#====================

function settings() {
  case $theme in
    1)
      bright="1;"
      bcolor="1;33;44"
      ;;
    2)
      bright="1;"
      bcolor="1;37;100"
      ;;
    3)
      bright=""
      bcolor=46
      ;;
    4)
      bright=""
      bcolor="30;47"
      ;;
    5)
      bright=""
      bcolor=42
      ;;
  esac
}

#====================

function show() {
  clear -x
  printf "\e[0m\e[${bcolor};1m%40s\e[0m\e[${bcolor}m%40s\e[0m\n" "$title" "$shell p$page($back)"
  sed \
  -e "s/!#!/[${bcolor};1m/g" \
  -e "s/!_!/[4m/g" \
  -e "s/!\*!/[1m/g" \
  -e "s/!\^!/[7m/g" \
  -e "s/#!\([^!]*\)!/[${bcolor};1m\1[0m/g" \
  -e "s/_!\([^!]*\)!/[4m\1[24m/g" \
  -e "s/\*!\([^!]*\)!/[1m\1[22m/g" \
  -e "s/\^!\([^!]*\)!/[7m\1[27m/g" \
  -e "s/!k!/[30m/g" \
  -e "s/!r!/[31m/g" \
  -e "s/!g!/[32m/g" \
  -e "s/!y!/[33m/g" \
  -e "s/!b!/[34m/g" \
  -e "s/!m!/[35m/g" \
  -e "s/!c!/[36m/g" \
  -e "s/!w!/[37m/g" \
  -e "s/!K!/[40m/g" \
  -e "s/!R!/[41m/g" \
  -e "s/!G!/[42m/g" \
  -e "s/!Y!/[43m/g" \
  -e "s/!B!/[44m/g" \
  -e "s/!M!/[45m/g" \
  -e "s/!C!/[46m/g" \
  -e "s/!W!/[47m/g" \
  -e "s/!!/[0m/g"
  printf "\e[0m\e[${bcolor}m$(date '+%H:%M')             \e[4mp\e[24mrev \e[4mn\e[24mext \e[4mh\e[24mome \e[4mf\e[24mind \e[4mg\e[24moto \e[4mb\e[24mack \e[4md\e[24memo \e[4ms\e[24mhell \e[4mo\e[24mptions \e[4mu\e[24mpdate \e[4mq\e[24muit ?\e[0m"
  navigate
}

#====================

function demo() {
  if [ $show = 1 ]; then
    local sh
    sh=$shell
    if [ "$1" = "bash" ]; then
      sh=bash
      shift
    elif [ "$1" = "tcsh" ]; then
      sh=tcsh
      shift
    fi
    if [ -d $workd ]; then
      pushd $workd > /dev/null
    else
      pushd . > /dev/null
      printf "\n\e[31mCannot chdir to $workd - not a valid directory: set cwd in options menu\e[0m"
    fi
    if [ $# -eq 1 ]; then
      if [ "$sh" = "bash" ]; then
        printf "\n\e[1m$ "
        echo -n $1
        printf "\e[0m\n"
        echo "$1" > ~/.bash_history
        bash -c "$1"
      else
        printf "\n\e[1m%% "
        echo -n $1
        printf "\e[0m\n"
        echo "$1" > ~/.history
        echo "$1" | tcsh
      fi
      navigate
    else
      printf "\r\e[${bcolor}m%80s\e[0m\n" "Move cursor up to demo history, or use !NUM, ^D to exit when done with $sh"
      if [ "$sh" = "bash" ]; then
        cat /dev/null > ~/.bash_history
        echo "$ history"
        while [ $# -ne 0 ]; do
          echo "$1" >> ~/.bash_history
          echo "    $1"
          shift
        done
        PS1="$ " PS2="> " bash -i < /dev/tty
      else
        cat /dev/null > ~/.history
        echo "% history"
        while [ $# -ne 0 ]; do
          echo "$1" >> ~/.history
          echo "    $1"
          shift
        done
        tcsh -i < /dev/tty
      fi
    fi
    popd
  fi
}

#====================

function nodemo() {
  if [ $show = 1 ]; then
    printf "\nSorry, no demo for this page, type 's' to enter $shell "
    navigate
  fi
}

#====================

settings
while true; do
  case "$page" in
    0) #-------------------- OPTIONS --------------------
      show << END-OF-PAGE

  #!Options!

    _!Theme!

      ^!1!) !b!!^!  !! bold blue
      ^!2!) !k!!^!  !! dark night
      ^!3!) !c!!^!  !! subtle cyan
      ^!4!) !w!!^!  !! gray shades
      ^!5!) !g!!^!  !! going green

    _!Default shell! = $shell

      ^!6!) bash
      ^!7!) tcsh

    _!Working directory! = $workd

      ^!8!) change

    Press ^!b! to go back

END-OF-PAGE
      
      case $key in
        [1-5])
          theme=$key
          ;;
        6)
          shell=bash
          ;;
        7)
          shell=tcsh
          ;;
        8)
          local dir
          read -p ~/directory? dir < /dev/tty
          if [ -d ~/$dir ]; then
            workd=~/$dir
          else
            printf "Not a valid directory"
          fi
          ;;
      esac
      settings
# ch1.txt
# Chapter 1 - Introduction
# Created by Robert van Engelen
# Distributed under the GPL
# title created with: toilet --metal -f mono12 UNIX
      ;;
    1) #-------------------- PAGE 1 --------------------
      show << END-OF-PAGE


                    [0;1;34;94m▄▄[0m    [0;1;34;94m▄[0;34m▄[0m  [0;34m▄▄▄[0m   [0;34m▄▄[0m   [0;34m▄▄[0;37m▄▄▄▄[0m   [0;37m▄▄▄[0m  [0;37m▄▄▄[0m 
                    [0;34m██[0m    [0;34m██[0m  [0;34m███[0m   [0;37m██[0m   [0;37m▀▀██▀▀[0m    [0;1;30;90m██▄▄██[0m  
                    [0;34m██[0m    [0;34m█[0;37m█[0m  [0;37m██▀█[0m  [0;37m██[0m     [0;1;30;90m██[0m       [0;1;30;90m████[0m   
                    [0;37m██[0m    [0;37m██[0m  [0;37m██[0m [0;37m██[0m [0;1;30;90m██[0m     [0;1;30;90m██[0m        [0;1;34;94m██[0m    
                    [0;37m██[0m    [0;37m█[0;1;30;90m█[0m  [0;1;30;90m██[0m  [0;1;30;90m█▄██[0m     [0;1;34;94m██[0m       [0;1;34;94m████[0m   
                    [0;1;30;90m▀██▄▄██▀[0m  [0;1;30;90m██[0m   [0;1;34;94m███[0m   [0;1;34;94m▄▄██▄▄[0m    [0;34m██[0m  [0;34m██[0m  
                      [0;1;30;90m▀▀▀▀[0m    [0;1;34;94m▀▀[0m   [0;1;34;94m▀▀▀[0m   [0;1;34;94m▀▀[0;34m▀▀▀▀[0m   [0;34m▀▀▀[0m  [0;34m▀▀▀[0m 

               [0;1;34;94m▄▄▄▄▄▄▄[0;34m▄[0m                      [0;37m▄▄▄▄[0m               
               [0;34m▀▀▀██▀▀▀[0m                      [0;37m▀[0;1;30;90m▀██[0m               
                  [0;34m██[0m      [0;37m▄████▄[0m    [0;37m▄█[0;1;30;90m███▄[0m     [0;1;30;90m██[0m      [0;1;34;94m▄▄█████▄[0m 
                  [0;37m██[0m     [0;37m██▀[0m  [0;1;30;90m▀██[0m  [0;1;30;90m██▀[0m  [0;1;30;90m▀██[0m    [0;1;34;94m██[0m      [0;1;34;94m██▄▄▄▄[0m [0;34m▀[0m 
                  [0;37m██[0m     [0;1;30;90m██[0m    [0;1;30;90m██[0m  [0;1;30;90m██[0m    [0;1;34;94m██[0m    [0;1;34;94m██[0m       [0;34m▀▀▀▀██▄[0m 
                  [0;1;30;90m██[0m     [0;1;30;90m▀██▄▄[0;1;34;94m██▀[0m  [0;1;34;94m▀██▄▄██▀[0m    [0;34m██▄▄▄[0m   [0;34m█▄▄▄▄▄█[0;37m█[0m 
                  [0;1;30;90m▀▀[0m       [0;1;34;94m▀▀▀▀[0m      [0;1;34;94m▀[0;34m▀▀▀[0m       [0;34m▀▀▀▀[0m    [0;37m▀▀▀▀▀▀[0m  


                          #!Chapter 1 - Introduction!


END-OF-PAGE
title="Chapter 1 - Introduction"
if [ -d "$HOME/Courses/COP4342/tmp" ]; then workd=$HOME/Courses/COP4342/tmp; fi
demo 'cowsay -f sheep "We will we will rock you!"'
      ;;
    2) #-------------------- PAGE 2 --------------------
      show << END-OF-PAGE

  #!Caveat lector!

    Learning Linux/Unix commands from a book is like visiting a petting zoo to
    study the diversity of animals in the animal kingdom.

    To truly appreciate their behaviors you have to experience them in the wild.

    Like animals, powerful Linux/Unix commands can bite you.

    Be safe and have fun with Linux!

END-OF-PAGE
demo 'cowsay -f sheep "Beh! Sheep are afraid of dangerous animals in petting zoos."'
      ;;
    3) #-------------------- PAGE 3 --------------------
      show << END-OF-PAGE

  #!Typographical conventions used in these pages!

    These conventions help improve readability but are otherwise not essential:

      *!program! or shell *!command! or *!VARIABLE!, for example *!ls -al! and *!PATH!

      _!filename! or directory _!path!, for example _!/usr/bin!

      ^!keypress!, for example ^!^C! (control-C) and ^!ENTER!

      !m!URL!!, for example !m!https://www.gnu.org!!

      !r!incorrect!!, for example !r!if -f \$file; then

      !g!correct!!, for example !g!if [ -f \$file ]; then

END-OF-PAGE
demo bash 'printf "ANSI ESC[ CSI sequences \x1b[35mhttps://en.wikipedia.org/wiki/ANSI_escape_code#CSI_sequences\x1b[0m\n"'
      ;;
    4) #-------------------- PAGE 4 --------------------
      show << END-OF-PAGE

  #!Overview!

    • History of Unix
    
    • Unices: GNU-Linux, Linux, Berkeley Unix, Unix System V, Mac OS X

    • Overview of Linux

END-OF-PAGE
demo 'cowsay -f surgery "Get on with it! Start the operation alright!"'
      ;;
    5) #-------------------- PAGE 5 --------------------
      show << END-OF-PAGE

  #!Unix!

    Unix (/ˈjuːnɪks/; trademarked as UNIX) is a family of multitasking,
    multiuser computer operating systems that derive from the original AT&T
    Unix
    
    Development started in the 1970s at the Bell Labs research center by Ken
    Thompson, Dennis Ritchie, and others

    The "Unix philosophy": the operating system provides a set of simple tools
    that each perform a limited, well-defined function

      A shell scripting and command language to combine the tools to perform
      complex workflows

      A unified filesystem as the main means of communication

END-OF-PAGE
demo $'cowsay -f tux "What? That\'s before I was even born!"'
      ;;
    6) #-------------------- PAGE 6 --------------------
      show << END-OF-PAGE

  #!Unix and C!

    UNIX was rewritten in C in 1973 by Dennis Richie and Ken Thompson for
    portability and allow Unix to reach numerous platforms

    Developed by Dennis Richie, C traces back to B and BCPL

      C compiles to efficient code

      C is a good systems language, allows direct access to resources and
      supports *!asm! directives to compile assembly code in C source files

      C is standardized by ANSI, starting with C89

END-OF-PAGE
demo 'cowsay -f sheep "Nothing to C here"'
      ;;
    7) #-------------------- PAGE 7 --------------------
      show << END-OF-PAGE

  #!Unices!

    GNU-Linux (GNU stands for Gnu's Not UNIX) project started by Richard
    Stallman in 1983 as the GNU Operating System, today GNU-Linux runs on top
    of FreeBSD

    Berkeley UNIX (BSD stands for Berkeley Software Distribution) developed at
    UC Berkeley with many popular changes and additions

    Mac OS X is based on a version of BSD called Darwin

    Other major versions are UNIX System V (SVR4), Solaris, HP-UX, IBM AIX, QNX

    Unix versions that were originally designed for personal computers based on
    the Intel x86 include Minix, XINU and Linux

END-OF-PAGE
demo 'cowsay -f tux "Your OS is $OSTYPE"'
      ;;
    8) #-------------------- PAGE 8 --------------------
      show << END-OF-PAGE

  #!Linux!

    Linux (/ˈlɪnəks/) broadly denotes a family of free and open-source software
    operating systems (OS) built around the Linux kernel
    
    Has been around for over 25 years and has become a leading platform for
    operating system development

    Distributed under the GNU Public License (GPL) !m!https://www.gnu.org/licenses!!

    The Linprog machines in CS use the Gentoo distribution
    
    Other popular server distributions include Centos, Debian, Fedora, Linux
    Mint, OpenSuSE and Ubuntu

    Google Chrome is based on the Linux kernel

END-OF-PAGE
demo 'cowsay -f tux "I was born and raised by a GNU"'
      ;;
    9) #-------------------- PAGE 9 --------------------
      show << END-OF-PAGE

  #!Linux in layers!

    You can view the operating system presentation in layers

      The kernel, which provides access to OS resources, virtual and physical

        The OS state can be observed directly via _!/proc! and _!/sys!

      System calls, which allow us to access and modify OS resources

      Libraries, which provide more digestible access to system calls

      Processes, which take advantage of libraries and sometimes direct system
      calls
        
        For example a shell process, which provides a platform for a user to
        start other processes and to script repetitious tasks

END-OF-PAGE
nodemo
      ;;
    10) #-------------------- PAGE 10 --------------------
      show << END-OF-PAGE

  #!Working with Linux layers!

    How do we create and manipulate these various layers?

      Processes

        *!fork!(2), *!execlp!(3), *!wait!(2), *!exit!(3); *!clone!(2)

      Filesystems

        *!mount!(2), *!getdents!(2), *!stat!(2), *!statfs!(2)

      I/O

        *!open!(2), *!read!(2), *!write!(2), *!close!(2), *!socket!(2) et al.

END-OF-PAGE
demo 'cowsay -f daemon "Forking a process"'
      ;;
    11) #-------------------- PAGE 11 --------------------
      show << END-OF-PAGE

  #!Some definitions!

    An "executable" is a file that can be "executed" by an existing process

      A "static" executable is a standalone program that does not need any
      other runtime support

      A "dynamically linked" executable requires the services of a runtime
      linker such as _!/lib64/ld-linux-x86-64.so.2! in order to dynamically
      load shared libraries

      A "script" executable, which requires a separate interpreter such as Perl
      or Python

END-OF-PAGE
nodemo
      ;;
    12) #-------------------- PAGE 12 --------------------
      show << END-OF-PAGE

  #!More definitions!

    A "user shell" provides an environment that accepts keyboard input and
    output in order to allow a user to execute commands and command-line
    interface (CLI) programs

    A "built-in command" to a shell does not cause the execution of a new
    process; often, it is used to change the state of a shell itself

    A "program" started from a shell starts a new process to execute the
    executable program

    An "alias" is a string that is to be expanded into another command

    A "variable" is a way to reference state in a shell, we also have
    "environment variables" which specify state for a process

    Command-line "flags" (aka "switches") afford us a method to specify
    options with commands and programs, generally indicated either by a single
    dash or a double dash

END-OF-PAGE
nodemo
      ;;
    13) #-------------------- PAGE 13 --------------------
      show << END-OF-PAGE

  #!Filtering!

    A "filter" should read from its stdin (standard input, file descriptor 0)
    and write to its stdout (standard output, file descriptor 1); any error or
    miscellaneous information should be written to stderr (standard error, file
    descriptor 2)

    Generally, filters should not read configuration files but should instead
    take their options from command line indicators like "flags"

    Ideally, the output of one filter should be easily readable by another
    filter

      *!$ ls -l | head -n40 | less!  # read first 40 lines of ls with less

END-OF-PAGE
demo 'ls -l .. | head -n10 | cowsay -f bunny'
      ;;
    *) #-------------------- END --------------------
      page=13
      ;;
  esac
done

#!/bin/bash
# pre-pages
# Created by Robert van Engelen
# Distributed under the GPL

theme=1     # default theme
shell=bash  # shell to use for demos (bash or tcsh)
workd="."   # work directory to use for shell demos
title="Welcome back $USER" # title of the presentation (<40 chars)
wsite="http://www.cs.fsu.edu/~engelen/courses/COP4342" # web site with ch*.pages

#====================

page=1
back=1
last=1
show=0

#====================

function navigate() {
  while true; do
    read -rsn1 key < /dev/tty
    case $key in 
      $'\e'|'[')
        ;;
      *)
        break;
        ;;
    esac
  done
  show=0
  case $key in
    p|D)
      if [[ $page > 1 ]]; then
        (( page-- ))
      fi
      ;;
    n|C)
      (( page++ ))
      ;;
    h)
      back=$page
      page=1
      ;;
    f|/)
      echo
      read -p "Find (regex) ? " key < /dev/tty
      if [ -n "$key" ]; then
        awk "/ PAGE / { page = \$4 }
             /$key/ { if (page > 0) print \"Page\", page, \": \", \$0 }" $0
        echo
        read -n1 -p "Press a key to continue " key < /dev/tty
      fi
      ;;
    g)
      back=$page
      echo
      read -p "Page? " page < /dev/tty
      ;;
    b)
      local temp
      temp=$page
      page=$back
      back=$temp
      ;;
    d)
      show=1
      ;;
    s)
      printf "\r\e[${bcolor}m%80s\e[0m\n" "^D to exit when done with $shell"
      if [ -d $workd ]; then
        pushd $workd > /dev/null
      else
        pushd . > /dev/null
      fi
      if [ "$shell" = "bash" ]; then
        PS1="$ " PS2="> " bash -i < /dev/tty
      else
        tcsh -i < /dev/tty
      fi
      popd
      ;;
    o)
      if [[ $page > 0 ]]; then
        back=$page
      fi
      page=0
      ;;
    u)
      echo
      read -n1 -p "Download update (y/n)? " key < /dev/tty
      if [ $key = "y" ]; then
        if which wget; then
          echo "Saved old $0 as $0.old"
          mv -f $0 $0.old
          echo "Getting $0 from $wsite..."
          wget $wsite/$0
          chmod +x $0
          read -n1 -p "Press a key to restart " key < /dev/tty
          exec $0
        else
          echo "No wget found, you need to install wget first"
        fi
      fi
      ;;
    q)
      echo
      read -n1 -p "Exit (y/n)? " key < /dev/tty
      if [ $key = "y" ]; then
        echo -e "\nBye!\n"
        exit 0
      fi
      ;;
  esac
}

#====================

function settings() {
  case $theme in
    1)
      bright="1;"
      bcolor="1;33;44"
      ;;
    2)
      bright="1;"
      bcolor="1;37;100"
      ;;
    3)
      bright=""
      bcolor=46
      ;;
    4)
      bright=""
      bcolor="30;47"
      ;;
    5)
      bright=""
      bcolor=42
      ;;
  esac
}

#====================

function show() {
  clear -x
  printf "\e[0m\e[${bcolor};1m%40s\e[0m\e[${bcolor}m%40s\e[0m\n" "$title" "$shell p$page($back)"
  sed \
  -e "s/!#!/[${bcolor};1m/g" \
  -e "s/!_!/[4m/g" \
  -e "s/!\*!/[1m/g" \
  -e "s/!\^!/[7m/g" \
  -e "s/#!\([^!]*\)!/[${bcolor};1m\1[0m/g" \
  -e "s/_!\([^!]*\)!/[4m\1[24m/g" \
  -e "s/\*!\([^!]*\)!/[1m\1[22m/g" \
  -e "s/\^!\([^!]*\)!/[7m\1[27m/g" \
  -e "s/!k!/[30m/g" \
  -e "s/!r!/[31m/g" \
  -e "s/!g!/[32m/g" \
  -e "s/!y!/[33m/g" \
  -e "s/!b!/[34m/g" \
  -e "s/!m!/[35m/g" \
  -e "s/!c!/[36m/g" \
  -e "s/!w!/[37m/g" \
  -e "s/!K!/[40m/g" \
  -e "s/!R!/[41m/g" \
  -e "s/!G!/[42m/g" \
  -e "s/!Y!/[43m/g" \
  -e "s/!B!/[44m/g" \
  -e "s/!M!/[45m/g" \
  -e "s/!C!/[46m/g" \
  -e "s/!W!/[47m/g" \
  -e "s/!!/[0m/g"
  printf "\e[0m\e[${bcolor}m$(date '+%H:%M')             \e[4mp\e[24mrev \e[4mn\e[24mext \e[4mh\e[24mome \e[4mf\e[24mind \e[4mg\e[24moto \e[4mb\e[24mack \e[4md\e[24memo \e[4ms\e[24mhell \e[4mo\e[24mptions \e[4mu\e[24mpdate \e[4mq\e[24muit ?\e[0m"
  navigate
}

#====================

function demo() {
  if [ $show = 1 ]; then
    local sh
    sh=$shell
    if [ "$1" = "bash" ]; then
      sh=bash
      shift
    elif [ "$1" = "tcsh" ]; then
      sh=tcsh
      shift
    fi
    if [ -d $workd ]; then
      pushd $workd > /dev/null
    else
      pushd . > /dev/null
      printf "\n\e[31mCannot chdir to $workd - not a valid directory: set cwd in options menu\e[0m"
    fi
    if [ $# -eq 1 ]; then
      if [ "$sh" = "bash" ]; then
        printf "\n\e[1m$ "
        echo -n $1
        printf "\e[0m\n"
        echo "$1" > ~/.bash_history
        bash -c "$1"
      else
        printf "\n\e[1m%% "
        echo -n $1
        printf "\e[0m\n"
        echo "$1" > ~/.history
        echo "$1" | tcsh
      fi
      navigate
    else
      printf "\r\e[${bcolor}m%80s\e[0m\n" "Move cursor up to demo history, or use !NUM, ^D to exit when done with $sh"
      if [ "$sh" = "bash" ]; then
        cat /dev/null > ~/.bash_history
        echo "$ history"
        while [ $# -ne 0 ]; do
          echo "$1" >> ~/.bash_history
          echo "    $1"
          shift
        done
        PS1="$ " PS2="> " bash -i < /dev/tty
      else
        cat /dev/null > ~/.history
        echo "% history"
        while [ $# -ne 0 ]; do
          echo "$1" >> ~/.history
          echo "    $1"
          shift
        done
        tcsh -i < /dev/tty
      fi
    fi
    popd
  fi
}

#====================

function nodemo() {
  if [ $show = 1 ]; then
    printf "\nSorry, no demo for this page, type 's' to enter $shell "
    navigate
  fi
}

#====================

settings
while true; do
  case "$page" in
    0) #-------------------- OPTIONS --------------------
      show << END-OF-PAGE

  #!Options!

    _!Theme!

      ^!1!) !b!!^!  !! bold blue
      ^!2!) !k!!^!  !! dark night
      ^!3!) !c!!^!  !! subtle cyan
      ^!4!) !w!!^!  !! gray shades
      ^!5!) !g!!^!  !! going green

    _!Default shell! = $shell

      ^!6!) bash
      ^!7!) tcsh

    _!Working directory! = $workd

      ^!8!) change

    Press ^!b! to go back

END-OF-PAGE
      
      case $key in
        [1-5])
          theme=$key
          ;;
        6)
          shell=bash
          ;;
        7)
          shell=tcsh
          ;;
        8)
          local dir
          read -p ~/directory? dir < /dev/tty
          if [ -d ~/$dir ]; then
            workd=~/$dir
          else
            printf "Not a valid directory"
          fi
          ;;
      esac
      settings
# ch10.txt
# Chapter 10 - Bash Programming
# Created by Robert van Engelen
# Distributed under the GPL
      ;;
    1) #-------------------- PAGE 1 --------------------
      show << END-OF-PAGE


                    [0;1;34;94mâ–„â–„[0m    [0;1;34;94mâ–„[0;34mâ–„[0m  [0;34mâ–„â–„â–„[0m   [0;34mâ–„â–„[0m   [0;34mâ–„â–„[0;37mâ–„â–„â–„â–„[0m   [0;37mâ–„â–„â–„[0m  [0;37mâ–„â–„â–„[0m 
                    [0;34mâ–ˆâ–ˆ[0m    [0;34mâ–ˆâ–ˆ[0m  [0;34mâ–ˆâ–ˆâ–ˆ[0m   [0;37mâ–ˆâ–ˆ[0m   [0;37mâ–€â–€â–ˆâ–ˆâ–€â–€[0m    [0;1;30;90mâ–ˆâ–ˆâ–„â–„â–ˆâ–ˆ[0m  
                    [0;34mâ–ˆâ–ˆ[0m    [0;34mâ–ˆ[0;37mâ–ˆ[0m  [0;37mâ–ˆâ–ˆâ–€â–ˆ[0m  [0;37mâ–ˆâ–ˆ[0m     [0;1;30;90mâ–ˆâ–ˆ[0m       [0;1;30;90mâ–ˆâ–ˆâ–ˆâ–ˆ[0m   
                    [0;37mâ–ˆâ–ˆ[0m    [0;37mâ–ˆâ–ˆ[0m  [0;37mâ–ˆâ–ˆ[0m [0;37mâ–ˆâ–ˆ[0m [0;1;30;90mâ–ˆâ–ˆ[0m     [0;1;30;90mâ–ˆâ–ˆ[0m        [0;1;34;94mâ–ˆâ–ˆ[0m    
                    [0;37mâ–ˆâ–ˆ[0m    [0;37mâ–ˆ[0;1;30;90mâ–ˆ[0m  [0;1;30;90mâ–ˆâ–ˆ[0m  [0;1;30;90mâ–ˆâ–„â–ˆâ–ˆ[0m     [0;1;34;94mâ–ˆâ–ˆ[0m       [0;1;34;94mâ–ˆâ–ˆâ–ˆâ–ˆ[0m   
                    [0;1;30;90mâ–€â–ˆâ–ˆâ–„â–„â–ˆâ–ˆâ–€[0m  [0;1;30;90mâ–ˆâ–ˆ[0m   [0;1;34;94mâ–ˆâ–ˆâ–ˆ[0m   [0;1;34;94mâ–„â–„â–ˆâ–ˆâ–„â–„[0m    [0;34mâ–ˆâ–ˆ[0m  [0;34mâ–ˆâ–ˆ[0m  
                      [0;1;30;90mâ–€â–€â–€â–€[0m    [0;1;34;94mâ–€â–€[0m   [0;1;34;94mâ–€â–€â–€[0m   [0;1;34;94mâ–€â–€[0;34mâ–€â–€â–€â–€[0m   [0;34mâ–€â–€â–€[0m  [0;34mâ–€â–€â–€[0m 

               [0;1;34;94mâ–„â–„â–„â–„â–„â–„â–„[0;34mâ–„[0m                      [0;37mâ–„â–„â–„â–„[0m               
               [0;34mâ–€â–€â–€â–ˆâ–ˆâ–€â–€â–€[0m                      [0;37mâ–€[0;1;30;90mâ–€â–ˆâ–ˆ[0m               
                  [0;34mâ–ˆâ–ˆ[0m      [0;37mâ–„â–ˆâ–ˆâ–ˆâ–ˆâ–„[0m    [0;37mâ–„â–ˆ[0;1;30;90mâ–ˆâ–ˆâ–ˆâ–„[0m     [0;1;30;90mâ–ˆâ–ˆ[0m      [0;1;34;94mâ–„â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„[0m 
                  [0;37mâ–ˆâ–ˆ[0m     [0;37mâ–ˆâ–ˆâ–€[0m  [0;1;30;90mâ–€â–ˆâ–ˆ[0m  [0;1;30;90mâ–ˆâ–ˆâ–€[0m  [0;1;30;90mâ–€â–ˆâ–ˆ[0m    [0;1;34;94mâ–ˆâ–ˆ[0m      [0;1;34;94mâ–ˆâ–ˆâ–„â–„â–„â–„[0m [0;34mâ–€[0m 
                  [0;37mâ–ˆâ–ˆ[0m     [0;1;30;90mâ–ˆâ–ˆ[0m    [0;1;30;90mâ–ˆâ–ˆ[0m  [0;1;30;90mâ–ˆâ–ˆ[0m    [0;1;34;94mâ–ˆâ–ˆ[0m    [0;1;34;94mâ–ˆâ–ˆ[0m       [0;34mâ–€â–€â–€â–€â–ˆâ–ˆâ–„[0m 
                  [0;1;30;90mâ–ˆâ–ˆ[0m     [0;1;30;90mâ–€â–ˆâ–ˆâ–„â–„[0;1;34;94mâ–ˆâ–ˆâ–€[0m  [0;1;34;94mâ–€â–ˆâ–ˆâ–„â–„â–ˆâ–ˆâ–€[0m    [0;34mâ–ˆâ–ˆâ–„â–„â–„[0m   [0;34mâ–ˆâ–„â–„â–„â–„â–„â–ˆ[0;37mâ–ˆ[0m 
                  [0;1;30;90mâ–€â–€[0m       [0;1;34;94mâ–€â–€â–€â–€[0m      [0;1;34;94mâ–€[0;34mâ–€â–€â–€[0m       [0;34mâ–€â–€â–€â–€[0m    [0;37mâ–€â–€â–€â–€â–€â–€[0m  


                         #!Chapter 10 - Bash Programming!


END-OF-PAGE
title="Chapter 10 - Bash Programming"
if [ -d "$HOME/Courses/COP4342/tmp" ]; then workd=$HOME/Courses/COP4342/tmp; fi
demo 'cowsay -f turtle "The Bourne Again Shell again"'
      ;;
    2) #-------------------- PAGE 2 --------------------
      show << END-OF-PAGE

  #!Overview!

    â€¢ The *!if-then-elif-else-fi! statement

    â€¢ The *!case-in-esac! statement

    â€¢ The *!while-do-done! statement

    â€¢ The *!until-do-done! statement

    â€¢ The *!for-in-do-done! statement

    â€¢ *!true!, *!false!, *!break! and *!continue!

    â€¢ "Here documents"

    â€¢ Working with file descriptors

    â€¢ Expanding unset variables

END-OF-PAGE
nodemo
      ;;
    3) #-------------------- PAGE 3 --------------------
      show << END-OF-PAGE

  #!The if statement!

    The general form of an *!if! statment with optional *!else! and *!elif! is:
!*!
      if COMMAND
      then
        ... one or more commands ...
      elif COMMAND
      then
        ... one or more commands ...
      else
        ... one or more commands ...
      fi
!!
    Because *!;! is a separator, just like newline, we can use shorter forms:

      *![el]if COMMAND; then!

    Note that *!if! checks the exit status of a command (exit 0 is success), so
    use *!test CONDITION! or its shorthand *![ CONDITION ]! to test conditions

END-OF-PAGE
nodemo
      ;;
    4) #-------------------- PAGE 4 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    if [ -f \$file ]; then
      more \$file
    elif [ -d \$file]; then
      echo "\$file is a directory"
    else
      echo "\$file not found" 1>&2
      exit 1
    fi
!!
END-OF-PAGE
nodemo
      ;;
    5) #-------------------- PAGE 5 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    if which tcsh; then
      echo "You have tcsh, which was found on your \\\$PATH"
      if ls -l \$(which tcsh) 2> /dev/null; then
        echo "OK"
      else
        echo "Could not list tcsh, ls returned \$?"
      fi
    fi
!!
END-OF-PAGE
nodemo
      ;;
    6) #-------------------- PAGE 6 --------------------
      show << END-OF-PAGE

  #!The case statement!

    The general form of a *!case! statement is:
!*!
      case EXPR in
        PATTERN1)
          ... one or more commands ...
          ;;
        PATTERN2)
          ... one or more commands ...
          ;;
        *)
          ... one or more commands ...
          ;;
      esac
!!
    You can use *!|! in a pattern for alternatives, patterns may also contain:

      *!* !     matches any string, often used for the default case
      *!?!      matches any single character
      *![...]!  matches a character in the specified character class

END-OF-PAGE
nodemo
      ;;
    7) #-------------------- PAGE 7 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    read -p "Do you agree? yes or no (yes/no)?" answer
    case \$answer in
      "yes")
        echo "Alright, you agree!"
        ;;
      "no")
        echo "You do not agree"
        ;;
      *)
        echo "Please answer \\"yes\\" or \\"no\\""
    esac
!!
END-OF-PAGE
nodemo
      ;;
    8) #-------------------- PAGE 8 --------------------
      show << END-OF-PAGE

  #!The select statement!

    The *!select! statement allows you to set a variable according to the
    interactive selection of choices by a user, its a quick way to produce a
    menu of options

    The general form of a *!select! statements is:
!*!
      select VARIABLE in ARG1 ARG2 ...
      do
        ... one or more commands ...
      done
!*!

END-OF-PAGE
nodemo
      ;;
    9) #-------------------- PAGE 9 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    echo "Do you agree?"
    select answer yes no
    do
      if [ "\$answer" == "yes" ]; then
        echo "Alright, you agree!"
      elif [ "\$answer" == "no" ]; then
        echo "You do not agree"
      else
        echo "You did not answer \\"yes\\" or \\"no\\""
      fi
    done
!!
END-OF-PAGE
nodemo
      ;;
    10) #-------------------- PAGE 10 --------------------
      show << END-OF-PAGE

  #!The while statement!

    The genenal form of a *!while! statement is:
!*!
      while COMMAND
      do
        ... one or more commands ...
      done
!!
    Because *!;! is a separator, just like newline, we can use shorter forms:
!*!
      while COMMAND; do
        ... one or more commands ...
      done
!!
END-OF-PAGE
nodemo
      ;;
    11) #-------------------- PAGE 11 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    function yesno() {
      local key=''
      while [ "\$key" != "y" -a "\$key" != "n" ]; do
        read -rsn1 -p "\$1 (y/n)? " key < /dev/tty
      done
      echo "\$key"
      [ "\$key" = "y" ]
    }
!!
    *!$ if yesno "Try again"; then echo "OK"; else echo "Stopping"; fi!
    Try again (y/n)? y
    OK

END-OF-PAGE
nodemo
      ;;
    12) #-------------------- PAGE 12 --------------------
      show << END-OF-PAGE

  #!The until statement!

    The genenal form of an *!until! statement is:
!*!
      until COMMAND
      do
        ... one or more commands ...
      done
!!
    Because *!;! is a separator, just like newline, we can use shorter forms:
!*!
      until COMMAND; do
        ... one or more commands ...
      done
!!
END-OF-PAGE
nodemo
      ;;
    13) #-------------------- PAGE 13 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    function yesno() {
      local key
      until [ "$key" = "y" -o "$key" = "n" ]; do
        read -rsn1 -p "$1 (y/n)? " key < /dev/tty
      done
      echo "$key"
      [ "$key" = "y" ]
    }
!!
    *!$ if yesno "Try again"; then echo "OK"; else echo "Stopping"; fi!
    Try again (y/n)? n
    Stopping

END-OF-PAGE
nodemo
      ;;
    14) #-------------------- PAGE 14 --------------------
      show << END-OF-PAGE

  #!true, false, break and continue!

    The built-in *!true! command exits with a zero exit code and the built-in
    *!false! command exits with a nonzero exit code

    The *!break! statement exits a loop and the *!continue! statement
    immediately starts the next iteration of a loop (or repeats a *!select!)

    Example:
!*!
      while true; do
        read -rsn1 -p "Press q to quit " key < /dev/tty
        if [ "\$key" = "q" ]; then
          break
        else
          echo "Keep iterating..."
          continue
        fi
        echo "This part is never executed"
      done
!!
END-OF-PAGE
nodemo
      ;;
    15) #-------------------- PAGE 15 --------------------
      show << END-OF-PAGE

  #!The for statement!

    The genenal form of a *!for! statement is:
!*!
      for VARIABLE in LIST
      do
        ... one or more commands ...
      done
!!
    Because *!;! is a separator, just like newline, we can use shorter forms:
!*!
      for VARIABLE in LIST; do
        ... one or more commands ...
      done
!!
    Note: *!VARIABLE! is a shell variable and has no local scope in *!for!

END-OF-PAGE
nodemo
      ;;
    16) #-------------------- PAGE 16 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    for file in *; do
      if [ -f \$file ]; then
        chmod -w \$file
      fi
    done
!!
END-OF-PAGE
nodemo
      ;;
    17) #-------------------- PAGE 17 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    function writeprotect() {
      local file
      for file in "\$@"; do
        if [ -f \$file ]; then
          chmod -w \$file
        fi
      done
    }
!!
    *!$ writeprotect *!

END-OF-PAGE
nodemo
      ;;
    18) #-------------------- PAGE 18 --------------------
      show << END-OF-PAGE

  #!Example!
!*!
    for i in {3..100}; do
      composite=0
      for j in \$(seq 2 \$i); do
        if [ \$j -ge \$i ]; then
          break
        elif (( i % j == 0 )); then
          composite=1
          break
        fi
      done
      if (( composite == 0 )); then
        echo "\$i is prime"
      fi
    done
!!
    Note:
    
      *!{3..100}! (brace expansion) is a list of *!3!, *!4!, ... *!100!
      *!seq 2 \$i! outputs a list of *!2!, *!3!, ... to the value of *!\$i!

END-OF-PAGE
nodemo
      ;;
    19) #-------------------- PAGE 19 --------------------
      show << END-OF-PAGE

  #!The for statement has a short form!

    The *!for! short form without *!in LIST! iterates over the shell arguments
    *!\$1!, *!\$2!, ...

    Example:
!*!
      function list() {
        local arg
        for arg
        do
          echo "Argument \$arg"
        done
      }
!!
      *!$ list a b c!
      Argument a
      Argument b
      Argument c

END-OF-PAGE
nodemo
      ;;
    20) #-------------------- PAGE 20 --------------------
      show << END-OF-PAGE

  #!The for statement with arithmetic!

    You can use *!for! with *!(( EXPRESSION; EXPRESSION; EXPRESSION ))!

    Example:
!*!
      for (( i=3; i<=100; i+=2 )); do
        composite=0
        for (( j=2; j<i; j++ )); do
          if (( i % j == 0 )); then
            composite=1
            break
          fi
        done
        if (( composite == 0 )); then
          echo "\$i is prime"
        fi
      done
!!
END-OF-PAGE
nodemo
      ;;
    21) #-------------------- PAGE 21 --------------------
      show << END-OF-PAGE

  #!Here document!

    A "here document" allows you to redirect a blob of text to standard input,
    indicated by *!<< SENTINEL!, the text that follows up to the *!SENTINEL! on
    a new line is read; here documents are often used within shell scripts

    Example:

      *!$ wc << STOP!
      *!> This is a test!
      *!> to count lines and words.!
      *!> STOP!
             2       9      41

    Text is expanded by variable substitution and command substitution:

      *!$ cat << END!
      *!> Hello \$USER, today is \$(date)!
      *!> END!
      Hello sam, today is Wed Feb  7 10:27:49 EST 2018

END-OF-PAGE
nodemo
      ;;
    22) #-------------------- PAGE 22 --------------------
      show << END-OF-PAGE

  #!Working with file descriptors!

    You can open files in bash using the *!exec! builtin:

      *!exec NUM> OUTFILE! # open _!OUTFILE! for writing via descriptor *!NUM!

      *!exec NUM< INFILE!  # open _!INFILE! for reading via descriptor *!NUM!

    To close the file use *!NUM<&-!

END-OF-PAGE
nodemo
      ;;
    23) #-------------------- PAGE 23 --------------------
      show << END-OF-PAGE

  #!Working with file descriptors continued!

    For example:

      *!$ exec 3> myfile.txt!            # open _!myfile.txt! for writing on FD 3
      *!$ echo "Created \$(date)" 1>&3!   # write to FD 3
      *!$ echo "That's all folks" 1>&3!  # write to FD 3
      *!$ exec 3<&-!                     # close FD 3 of _!myfile.txt!

    We used *!1>&3! to merge stdout with file descriptor 3, just as we could
    merge stderr (file descriptor 2) with stdout (file descriptor 1) using
    *!2>&1! as we saw earlier in Chapter 3

    Likewise, we can merge a file descriptor with stdin using *!0<&4!

      *!$ exec 4< myfile.txt!  # open _!myfile.txt! for reading on FD 4
      *!$ read line 0<&4!      # read a line from FD 4
      *!$ exec 4<&-!           # close FD 4 of _!myfile.txt!
      *!$ echo \$line!
      Created $(date)

END-OF-PAGE
nodemo
      ;;
    24) #-------------------- PAGE 24 --------------------
      show << END-OF-PAGE

  #!Working with file descriptors continued!

    To duplicate an output file descriptor *!NUM1! to *!NUM2! use:

      *!exec NUM1>&NUM2!

    To duplicate an input file descriptor *!NUM1! to *!NUM2! use:

      *!exec NUM1<&NUM2!

    These duplicate (merge) file descriptors such that the effects are visible
    to all of the shell commands that follow, instead of just locally per
    command

    *!exec! can also be used to execute a command or program, but the given
    command or program will replace the current shell program

END-OF-PAGE
nodemo
      ;;
    25) #-------------------- PAGE 25 --------------------
      show << END-OF-PAGE

  #!Expanding unset variables!

    Earlier in Chapter 8 we saw how to assign and use variables and arrays

    You can use an unset variable in bash, its value is empty

    There are quick ways to use and set default values for unset variables:

      *!\${VARIABLE:-DEFAULT}! gives the value of *!VARIABLE! when set, *!DEFAULT!
      otherwise

      *!\${VARIABLE:=DEFUALT}! sets *!VARIABLE! to *!DEFAULT! when unset and
      gives its value

    You can also display a message when a variable is not set:

      *!\${VARIABLE:?MESSAGE}! displays *!MESSAGE! on stderr when *!VARIABLE! is unset

END-OF-PAGE
nodemo
      ;;
    *) #-------------------- END --------------------
      page=25
      ;;
  esac
done
